#include <GL/gl.h>

#include <GL/glu.h>

#include <GL/glut.h>

#include <stdlib.h>

#include <stdio.h>

#include <math.h>



const int screenHeight = 1024; // window height is 1024

const int screenWidth = 1024; //window width is 1024

int n;

int m;

unsigned int *image;
GLuint texture[2];

//Juan Carmona



//<<<<<<<<<<<<<<<<<<<<< Prototypes >>>>>>>>>>>>>>>>>>

	void exit(int) ;

//<<<<<<<<<<<<<<<<<<<<<<< myInit >>>>>>>>>>>>>>>>>>>>

 void myInit(void)

 {

      glClearColor(1.0,1.0,1.0,0.0);       // set white background color

        glColor3f(0.0f, 1.0f, 1.0f);          // set the drawing color 

 	glPointSize(4.0);		       // a ?dot? is 4 by 4 pixels

 	glLineWidth(4.0);		       // a ?dot? is 4 by 4 pixels

	glEnable(GL_DEPTH_TEST);

	glMatrixMode(GL_PROJECTION); 

	glLoadIdentity();



	gluPerspective(160, 1, 2, 8); // What I can see

	glMatrixMode(GL_MODELVIEW);

	glLoadIdentity();

	gluLookAt(10.0, 10.0, 5.0, // Camera

		  10.0, 10.0, 3.0, // What I'm Looking at

		  0.0, 1.0, 0.0); // set camera*/

}

//<<<<<<<<<<<<<<<<<<<<<<<< My Shapes >>>>>>>>>>>>>>>>>



void ngon(int n){

	float degree, vertx, verty, rotate, degToRad; 

	rotate = 360.0/n; //Vertex rotation increment



	degree = rotate/2 + 180;//Current degree of vertex (starts rotated to make object upright) 

	degToRad = 180/3.14159; //Conversion factor from degrees to radians

	glBegin(GL_POLYGON);

	for(int i = 0; i < n; i++, degree += rotate)

	{

	vertx = 0.5 * sin(degree/degToRad); //next vertex's x coordinate 

	verty = 0.5 * sin((90 - degree)/degToRad); //next vertex's y coordinate 
	glTexCoord2f(vertx, verty);

	glVertex3f(vertx, verty, 0);

	}

	glEnd();

}	

void myTriangle(void) // Triangle

{



	glBegin(GL_POLYGON);
	glTexCoord2f(0.0, 0.0);

	glVertex2f(-1.0, -1.0);
	glTexCoord2f(0.5, 0.5);         

	glVertex2f(1.0, -1.0) ; 
        glTexCoord2f(0.5, 0.0); 

	glVertex2f(0.0, 1.0) ;       

	glEnd();

	glFlush();          // send all output to display 

}

void myPoint(void) // point at origin

{



  	glBegin(GL_POINTS);

	glVertex2f(0.0, 0.0);       

	glEnd();

	glFlush();          // send all output to display 

}

void myLine(void) // line through origin

{

 

	glBegin(GL_LINE_STRIP);

	glVertex2f(0.0, 1.0);       

	glVertex2f(0.0, -1.0) ;        

	glEnd();

	glFlush();          // send all output to display 

}

void mySquare(void) // Square

{



	glBegin(GL_POLYGON);
	glTexCoord2f(0.0, 0.0);

	glVertex2f(1.0, 1.0);
	glTexCoord2f(0.0, 1.0);  

	glVertex2f(-1.0,  1.0) ; 
	glTexCoord2f(1.0, 1.0);       

	glVertex2f(-1.0, -1.0); 
	glTexCoord2f(1.0, 0.0);      

	glVertex2f(1.0, -1.0);          

	glEnd();

	glFlush();          // send all output to display 

}

void myHex(void) // hexagon

{

	

	ngon(6);

	glFlush();          // send all output to display 

}

void myCircle(void) // Circle

{

	//glClear(GL_COLOR_BUFFER_BIT);     // clear the screen 



	glBegin(GL_POLYGON);

	for(float x = 0.0; x <= 2*3.14159; x += (2*3.14159)/40){ // 40 sided polygon
		glTexCoord2f(cos(x),sin(x));

		glVertex2f(2*cos(x),2*sin(x));

	}

	glEnd();

	glFlush();          // send all output to display 

}

void myCylinder(void){



	glBegin(GL_QUAD_STRIP);

	for(int j = 0; j <= 360; j+=5){ // body

		glColor3f(1.0,1.0,0.0);
		glTexCoord2f(cos(j* 3.14159/180.0),1);

		glVertex3f(cos(j* 3.14159/180.0),1, sin(j* 3.14159/180.0));//top vertex

		glColor3f(1.0,0.0,0.0);
		glTexCoord2f(cos(j* 3.14159/180.0),0);

		glVertex3f(cos(j* 3.14159/180.0),-1, sin(j* 3.14159/180.0)); //bottom vertex

	}

	glEnd();

	glBegin(GL_POLYGON); //Top

	for(int j = 0; j <= 360; j+=5){
		glTexCoord2f(cos(j* 3.14159/180.0),sin(j* 3.14159/180.0));

		glVertex3f(cos(j* 3.14159/180.0),1, sin(j* 3.14159/180.0));

	}

	glEnd();

	glBegin(GL_POLYGON); // bottom

	for(int j = 0; j <= 360; j+=5){
		glTexCoord2f(cos(j* 3.14159/180.0),sin(j* 3.14159/180.0));

		glVertex3f(cos(j* 3.14159/180.0),-1, sin(j* 3.14159/180.0));

	}

	glEnd();		

	glFlush();



}

void myCube(void) // cube

{



    // rotate cube so that it is not parallel with any of the axis planes 

	glRotatef(30.0, 0, 1, 0); 

	glRotatef(30.0, 1, 0, 1); 

 

 

	glBegin(GL_QUADS); 

    // front(z = 1 plane) 

	glColor4f(0.0, 0.0, 0.0, 1); 
	glTexCoord2f(0.0, 0.0);

 	glVertex3f(1, -1, 1); 
	glTexCoord2f(0.0, 1.0); 

	glVertex3f(1, 1, 1); 
	glTexCoord2f(1.0, 1.0); 

	glVertex3f(-1, 1, 1); 
	

	glVertex3f(-1, -1, 1); 

 

 

    //bottom(y = -1 plane) 

	glColor4f(0, 1, 0, 1); 
	glTexCoord2f(0.0, 0.0);

	glVertex3f(1, -1, 1); 
	glTexCoord2f(0.0, 1.0); 

	glVertex3f(-1, -1, 1);
	glTexCoord2f(1.0, 1.0); 

	glVertex3f(-1, -1, -1);
	glTexCoord2f(1.0, 0.0);  

	glVertex3f(1, -1, -1); 

 

 

    // top(y = 1 plane) 

	glColor4f(1, 0, 0, 1);
	glTexCoord2f(0.0, 0.0); 

	glVertex3f(1, 1, -1); 
	glTexCoord2f(0.0, 1.0); 

	glVertex3f(-1, 1, -1);
	glTexCoord2f(1.0, 1.0); 

	glVertex3f(-1, 1, 1);
	glTexCoord2f(1.0, 0.0);  

	glVertex3f(1, 1, 1); 

 

 

    // back(z = -1 plane) 

	glColor4f(1, 1, 0, 1); 
	glTexCoord2f(0.0, 0.0);

	glVertex3f(1, -1, -1); 
	glTexCoord2f(0.0, 1.0); 

	glVertex3f(-1, -1, -1);
	glTexCoord2f(1.0, 1.0); 

	glVertex3f(-1, 1, -1);
	glTexCoord2f(1.0, 0.0);  

	glVertex3f(1, 1, -1); 

 

    // right(x = 1 plane) 

	glColor4f(0, 1, 1, 1); 
	glTexCoord2f(0.0, 0.0);

	glVertex3f(1, 1, -1); 
	glTexCoord2f(0.0, 1.0); 

	glVertex3f(1, 1, 1);
	glTexCoord2f(1.0, 1.0); 

	glVertex3f(1, -1, 1); 
	glTexCoord2f(1.0, 0.0); 

	glVertex3f(1, -1, -1); 

 

	// left(x = -1 plane) 

	glColor4f(1, 0, 1, 1);
	glTexCoord2f(0.0, 0.0); 

	glVertex3f(-1, 1, 1); 
	glTexCoord2f(0.0, 1.0); 

	glVertex3f(-1, 1, -1); 
	glTexCoord2f(1.0, 1.0); 

	glVertex3f(-1, -1, -1); 
	glTexCoord2f(1.0, 0.0); 

	glVertex3f(-1, -1, 1); 

 

	glEnd(); 



	glFlush();          // send all output to display 

}

void mySphere(void){

	GLuint color = 0;

	GLfloat da = 18.0;

	GLfloat db = 18.0;

	float radius = 1.0;

	GLfloat x, y, z;

	for (float a = -90.0; a + da <= 90.0; a += da) {

    	glBegin(GL_QUAD_STRIP);

    	for (float b = 0.0; b <= 360.0; b += db) {

    if (color) {

	

        glColor3f(1, 0, 0);

      } else {

        glColor3f(1, 1, 1);

      }

      x = radius * cos(b* 3.14159/180.0) * cos(a* 3.14159/180.0);

      y = radius * sin(b* 3.14159/180.0) * cos(a* 3.14159/180.0);

      z = radius * sin(a* 3.14159/180.0);
	glTexCoord2f(x, y); 

      glVertex3f(x, y, z);

      x = radius * cos(b* 3.14159/180.0) * cos((a + da)* 3.14159/180.0);

      y = radius * sin(b* 3.14159/180.0) * cos((a + da)* 3.14159/180.0);

      z = radius * sin((a + da)* 3.14159/180.0);
	glTexCoord2f(x, y); 

      glVertex3f(x, y, z);

      color = 1 - color;

    }

    glEnd();

    glFlush();

  }

}	



//<<<<<<<<<<<<<<<<<<<<<<<< myKeyboard >>>>>>>>>>>>>>

void myKeyboard(unsigned char theKey, int mouseX, int mouseY)

{

	switch(theKey) // Key inputs for each individual shape function

	{



		case 'Q':

		case 'q':

			exit(-1); //terminate the program

		default:

		break; // do nothing

	}

}

//<<<<<<<<< Texture Creation >>>>>>>>>>>>>>>>>>>>

void readPPM(char *b){
	FILE *fd;
	int  k, nm;
	char c;
	int i;
	float s;
	int red, green, blue;
	
	fd = fopen(b, "r");
	
	fscanf(fd,"%[^\n] ",b);
	if(b[0]!='P'|| b[1] != '3')
	{
	printf("%s is not a PPM file!\n", b); 

	exit(0);
	} 
	printf("%s is a PPM file\n",b);

	fscanf(fd, "%c",&c);
	

	while(c == '#') {	
	fscanf(fd, "%[^\n] ", b);
	printf("%s\n",b);
	fscanf(fd, "%c",&c);
	}
	ungetc(c,fd); 
	fscanf(fd, "%d %d %d", &n, &m, &k);
	printf("%d rows  %d columns  max value= %d\n",n,m,k);
	nm = n*m;
	image = (unsigned int *) malloc(3*sizeof(unsigned int)*nm);
	s=255./k;
	for(i=0;i<nm;i++){
		fscanf(fd,"%d %d %d",&red, &green, &blue );
		image[3*nm-3*i-3]=red;
		image[3*nm-3*i-2]=green;
		image[3*nm-3*i-1]=blue;
	}
	fclose(fd);
	printf("read image s = %f\n", s);
	glPixelTransferf(GL_RED_SCALE, s);
	glPixelTransferf(GL_GREEN_SCALE, s);
	glPixelTransferf(GL_BLUE_SCALE, s);
	glPixelStorei(GL_UNPACK_SWAP_BYTES,GL_TRUE);  
	//gluScaleImage(GL_RGB, n, m, GL_UNSIGNED_BYTE, image, 512, 512, GL_UNSIGNED_BYTE, image);// scaling
}
void myTexture(){
	
	glGenTextures(6,texture);
	char b[6][100] = {"tile.ppm", "tree.ppm","building.ppm", "girl.ppm","eyes.ppm","bw.ppm"};
	for(int i = 0; i < 6; i++){
		glBindTexture(GL_TEXTURE_2D, texture[i]);
		readPPM(b[i]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER,GL_NEAREST);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER,GL_NEAREST);
		glTexImage2D(GL_TEXTURE_2D, 0, 3, n, m, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
	}
}	
//<<<<<<<<<<<<<<<< Room Generation >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void myWall(){



	glBegin(GL_QUADS);
	glTexCoord2f(0.0, 0.0);

	glVertex3f(0,0,0);
	glTexCoord2f(0.0, 1.0);

	glVertex3f(10,0,0);
	glTexCoord2f(1.0, 1.0);

	glVertex3f(10,10,0);
	glTexCoord2f(1.0, 0.0);

	glVertex3f(0,10,0);

	glEnd();

	glFlush();

}

void myRoom(){

	//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	

	glPushMatrix(); // saves starting matrix

	glPushMatrix();

	glColor3f(0.0f, 1.0f, 0.0f);

	glScalef(10,10,1);

	glTranslatef(-2.0,-2.0,2.0);//Left

	glRotatef(90,0.0,1.0,0.0);

	myWall();

	glPushMatrix();

	glRotatef(-90,0.0,1.0,0.0);//back

	glTranslatef(0.0,0.0,-5.0);

	myWall();

	glPopMatrix();

	glPushMatrix();

	glTranslatef(-5.0,0.0,6.0);// right

	myWall();

	glPopMatrix();

	glColor3f(1.0f,0.0f,1.0f);// floor

	glRotatef(90,1.0,0.0,0.0);

	myWall();
	glTranslatef(0.0,0.0,-5.0);// ceiling
	myWall();

	glPopMatrix();

	glPopMatrix();

}
// <<<<<<<<<<<<<<<<< My Display >>>>>>>>>>>>>>>>>

void myDisplay(){

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glPushMatrix(); // saves identity matrix

	glPushMatrix();
	myTexture();
	glEnable(GL_TEXTURE_2D);
	glTexEnvf(GL_TEXTURE_ENV,GL_TEXTURE_ENV_MODE,GL_REPLACE);
	glBindTexture(GL_TEXTURE_2D, texture[5]);// brick wall texture


	myRoom();
	

	glColor3f(0.0,0.0,1.0);

	glBindTexture(GL_TEXTURE_2D, texture[1]);// tree texture

	glScalef(2.0, 3.0, 1.0); // hexagon

	glTranslatef(1.0, 1.5, 0);

	glRotatef(30.0, 0.0, 0.0, 1.0);

	myHex();


	glBindTexture(GL_TEXTURE_2D, texture[2]); // building texture

	glPopMatrix(); // square

	glPushMatrix();

	glScalef(2.5, 2.5, 1);

	glTranslatef(2.0, 6.0, 0);

	glRotatef(-10.0, 0.0, 0.0, 1.0);

	mySquare();


	glBindTexture(GL_TEXTURE_2D, texture[3]); // girl

	glPopMatrix(); // triangle

	glPushMatrix();

	glScalef(3, 3, 1);

	glTranslatef(8.5,8,0.0);

	glRotatef(10,0,0,1);

	myTriangle();


	glBindTexture(GL_TEXTURE_2D, texture[4]); // eyes

	glPopMatrix(); // circle

	glPushMatrix();

	glScalef(2, 2.5, 1);

	glTranslatef(6,3,0.0);

	glRotatef(60.0, 0,0,1);

	myCircle();

	glBindTexture(GL_TEXTURE_2D, texture[0]); // tile

	glPopMatrix(); // cube

	glPushMatrix();

	glScalef(1,1,0.25);

	myCube();

	glBindTexture(GL_TEXTURE_2D, texture[1]); // tree

	glPopMatrix(); // Sphere

	glPushMatrix();

	glScalef(3, 3, 1);

	glTranslatef(2,0,0.0);

	mySphere();

	glBindTexture(GL_TEXTURE_2D, texture[0]); // tile

	glPopMatrix(); //Cylinder

	glTranslatef(-2,3,0);

	myCylinder();

	glPopMatrix();// To prevent gluMainLoop from performing constant transformations

	glPopMatrix();

}

//<<<<<<<<<<<<<<<<<<<<<<<< main >>>>>>>>>>>>>>>>>>>>>>

int	 main(int argc, char** argv)

{

	//readPPM();

	glutInit(&argc, argv);          // initialize the toolkit

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGBA | GLUT_DEPTH); // set display mode

	glutInitWindowSize(1024,1024);     // set window size



	glutCreateWindow("Assignment 4 Juan Carmona") ; // open the screen window 

	glutDisplayFunc(myDisplay);     // register redraw function

        glutKeyboardFunc(myKeyboard); // register the keyboard action function

	myInit();

               

	glutMainLoop(); 		     // go into a perpetual loop

}