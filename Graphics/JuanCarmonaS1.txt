#include <GL/gl.h>

#include <GL/glu.h>

#include <GL/glut.h>

#include <stdlib.h>

#include <math.h>

const int screenHeight = 800; // window height is 800

const int screenWidth = 800; //window width is 800

GLfloat vertices[][3] = {{-2.0,-2.0,-2.0},{2.0,-2.0,-2.0},{2.0,2.0,-2.0},{-2.0,2.0,-2.0},{-2.0,-2.0,2.0},{2.0,-2.0,2.0},{-2.0,-2.0,-2.0},{-2.0,-2.0,-2.0}}; // vertices for cube

GLfloat colors[][3] = {{0.0,0.0,0.0},{2.0,2.0,2.0},{1.0,2.0,2.0},{0.0,0.0,2.0},{1.0,2.0,0.0},{0.0,1.0,0.0},{1.0,0.0,2.0},{1.0,1.0,0.0}}; // colors array

//<<<<<<<<<<<<<<<<<<<<< Prototypes >>>>>>>>>>>>>>>>>>

	void exit(int) ;

//<<<<<<<<<<<<<<<<<<<<<<< myInit >>>>>>>>>>>>>>>>>>>>

 void myInit(void)

 {

        glClearColor(1.0,1.0,1.0,0.0);       // set white background color

        glColor3f(0.0f, 1.0f, 1.0f);          // set the drawing color 

 	glPointSize(4.0);		       // a ?dot? is 4 by 4 pixels

 	glLineWidth(4.0);		       // a ?dot? is 4 by 4 pixels

	glMatrixMode(GL_PROJECTION); 

	glLoadIdentity();

	// glOrtho(-1.5, 1.5, -2.5, 2.5, -3.5, 3.5); // original view

	glOrtho(-2.5, 2.5, -3.0, 3.0, -3.5, 3.5); // view told in class

}

//<<<<<<<<<<<<<<<<<<<<<<<< myDisplay >>>>>>>>>>>>>>>>>

void myTriangle(void) // Triangle

{

	glClear(GL_COLOR_BUFFER_BIT);     // clear the screen 



	glBegin(GL_POLYGON);

	glVertex2f(-1.0, -1.0);          

	glVertex2f(1.0, -1.0) ;          

	glVertex2f(0.0, 1.0) ;       

	glEnd();

	glFlush();          // send all output to display 

}

void myPoint(void) // point at origin

{

	glClear(GL_COLOR_BUFFER_BIT);     // clear the screen 

  	glBegin(GL_POINTS);

	glVertex2f(0.0, 0.0);       

	glEnd();

	glFlush();          // send all output to display 

}

void myLine(void) // line through origin

{

	glClear(GL_COLOR_BUFFER_BIT);     // clear the screen 

	glBegin(GL_LINE_STRIP);

	glVertex2f(0.0, 1.0);       

	glVertex2f(0.0, -1.0) ;        

	glEnd();

	glFlush();          // send all output to display 

}

void mySquare(void) // Square

{

	glClear(GL_COLOR_BUFFER_BIT);   // clear screen

	glBegin(GL_POLYGON);

	glVertex2f(1.0, 1.0);  

	glVertex2f(-1.0,  1.0) ;        

	glVertex2f(-1.0, -1.0) ;       

	glVertex2f(1.0, -1.0) ;          

	glEnd();

	glFlush();          // send all output to display 

}

void myHexagon(void) // Hexagon

{

	glClear(GL_COLOR_BUFFER_BIT);     // clear the screen  

	glBegin(GL_POLYGON);

	glVertex2f(-0.75, 0.75);         

	glVertex2f(0.75,  0.75) ;        

	glVertex2f(2.0, 0.0) ;       

	glVertex2f(0.75, -0.75) ;       

	glVertex2f(-0.75, -0.75) ;       

	glVertex2f(-2.0, 0.0) ;              

	glEnd();

	glFlush();          // send all output to display 

}

void myCircle(void) // Circle

{

	glClear(GL_COLOR_BUFFER_BIT);     // clear the screen 



	glBegin(GL_POLYGON);

	for(float x = 0.0; x <= 2*3.14159; x += (2*3.14159)/40){ // 40 sided polygon
		glVertex2f(2*cos(x),2*sin(x));
	}

	glEnd();

	glFlush();          // send all output to display 

}

void myCube(void)

{

	glClear(GL_COLOR_BUFFER_BIT);     // clear the screen 

	glEnableClientState(GL_COLOR_ARRAY); // Enable color array
	glEnableClientState(GL_VERTEX_ARRAY); // Enable vertex array
	glVertexPointer(3, GL_FLOAT, 0, vertices);// set pointer for vertices
	glColorPointer(3, GL_FLOAT, 0, colors);	 // set pointer for vertices
	GLubyte cubeIndex[24] = {0,3,2,1,2,3,7,6,0,4,7,3,1,2,6,5,4,5,6,7,0,1,5,4};
	for(int i = 0; i<6; i++ ){
		glDrawElements(GL_POLYGON, 4, GL_UNSIGNED_BYTE, &cubeIndex); // draw cube
	}

	glFlush();          // send all output to display 

}

//<<<<<<<<<<<<<<<<<<<<<<<< myKeyboard >>>>>>>>>>>>>>

void myKeyboard(unsigned char theKey, int mouseX, int mouseY)

{

	switch(theKey) // Key inputs for each individual shape function

	{

		case 'T': 

		case 't':

			glutDisplayFunc(myTriangle); 

		break;

		case 'P':

		case 'p':

			glutDisplayFunc(myPoint);

		break;

		case 'L':

		case 'l':

			glutDisplayFunc(myLine); 



		break;

		case 'S':

		case 's':

			glutDisplayFunc(mySquare); 

		break;

		case 'H':

		case 'h':

			glutDisplayFunc(myHexagon); 

		break;

		case 'C':

		case 'c':

			glutDisplayFunc(myCircle); 

		break;

		case 'U':

		case 'u':

			glutDisplayFunc(myCube); 

		break;

		case 'Q':

		case 'q':

			exit(-1); //terminate the program

		default:

		break; // do nothing

	}

}

//<<<<<<<<<<<<<<<<<<<<<<<< main >>>>>>>>>>>>>>>>>>>>>>

int	 main(int argc, char** argv)

{

	glutInit(&argc, argv);          // initialize the toolkit

	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); // set display mode

	glutInitWindowSize(800,800);     // set window size

	glutInitWindowPosition(100, 150); // set window position on screen

	glutCreateWindow("Assignment1 Type T, P, L, S, H, C, or U") ; // open the screen window 

	glutDisplayFunc(myTriangle);     // register redraw function starts with triangle

        glutKeyboardFunc(myKeyboard); // register the keyboard action function

	myInit();                   

	glutMainLoop(); 		     // go into a perpetual loop

}

